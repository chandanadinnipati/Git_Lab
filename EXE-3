MAIN TASK
------------------------------
1. First, one person in the group should create a public repository using their GitHub account.

-create repository with name "git_lab_practice_repo"
2. This same person should then follow the instructions from GitHub to add a remote, and 
then push their repository. Do not forget the –u flag, as suggested by GitHub!

-git remote add origin https://github.com/chandanadinnipati/git_lab_practice_repo.git
-git push -u origin main

3. All of the other members of the group should then be added as collaborators, so they can 
commit to the repository also.

-In github go to setting ->Collaborators->Invite collabarations by selecting permissions

4. Next, everyone else in the group should clone the repository from GitHub. Verify that the 
context of the repository is what is expected.

-git clone https://github.com/chandanadinnipati/git_lab_prctice_repo.git/

5. One of the group members who just cloned should now make a local commit, then push it. 
Everyone should verify that when they pull, that commit is added to their local repository 
(use git log to check for it).

-git add file1.txt
-git commit -m "file added"
-git push -u origin master
-git pull         # remaing people to get the chnges to local repository

6. Look at each other’s git log output. Notice how the SHA-1 is the same for a given commit 
across every copy of the repository. Why is this important?

-git log            #commit hash is calculated based on the commit's content, not the location of the repository.

7. Two members of the group should now make a commit locally, and race to push it. To keep 
things simple, be sure to edit different files. What happens to the runner-up?

-git checkout -b branch1 
-echo "hello from f1">file1.txt 
-git add file1.txt
-git commit -m "commit by f1"      #f1 modifies file in branch 1
-git push -u origin master
-git pull
-echo "hello from f2">file2.txt
-git add file2.txt
-git commit -m "commit by f2"     #f2 modifies file in master
-git push -u origin master


8. The runner-up should now pull. As a group, look at the output of the command. 
Additionally, look at the git log, and notice that there is a merge commit. You may also 
wish to view the DAG in gitk.

-git pull
-git log
-gitk

Stretch Task
-------------------------------------
1. Now create a situation where two group members both edit the same line in the same file 
and commit it locally. Race to push.

-git checkout -b branch1 
-echo "hello from f1">file1.txt 
-git add file1.txt
-git commit -m "commit by f1"      #f1 modifies file in branch 1
-git push -u origin master
-git pull
-git chekout master
-echo "hello from f2">file1.txt
-git add file1.txt
-git commit -m "commit by f2"     #f2 modifies file in master

2. When the runner-up does a pull, they should get a merge conflict.

-git pull   #by f2 onflict arises

3. Look as a group at the file in conflict, and resolve it.

-edit file1 so that to avoid conflict by using editors manually
file1=="hello from f1 and f2"

4. Use the add command to stage the fix, and then use commit to make the merge commit. 
Notice how this procedure is exactly the one you got used to when resolving conflicts in 
branches.

-git add file1.txt
-git commit -m "resolved the conflict"
